/**
 * @fileoverview gRPC-Web generated client stub for services
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: wakadoo.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var proto_auth_pb = require('./proto/auth_pb.js')

var proto_file_pb = require('./proto/file_pb.js')

var proto_session_pb = require('./proto/session_pb.js')
const proto = {};
proto.services = require('./wakadoo_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.services.FileClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.services.FilePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.file.FileSaveRequest,
 *   !proto.file.FileSaveResponse>}
 */
const methodDescriptor_File_Save = new grpc.web.MethodDescriptor(
  '/services.File/Save',
  grpc.web.MethodType.UNARY,
  proto_file_pb.FileSaveRequest,
  proto_file_pb.FileSaveResponse,
  /**
   * @param {!proto.file.FileSaveRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_file_pb.FileSaveResponse.deserializeBinary
);


/**
 * @param {!proto.file.FileSaveRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.file.FileSaveResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.file.FileSaveResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.FileClient.prototype.save =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.File/Save',
      request,
      metadata || {},
      methodDescriptor_File_Save,
      callback);
};


/**
 * @param {!proto.file.FileSaveRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.file.FileSaveResponse>}
 *     Promise that resolves to the response
 */
proto.services.FilePromiseClient.prototype.save =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.File/Save',
      request,
      metadata || {},
      methodDescriptor_File_Save);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.file.FileGetRequest,
 *   !proto.file.FileGetResponse>}
 */
const methodDescriptor_File_Get = new grpc.web.MethodDescriptor(
  '/services.File/Get',
  grpc.web.MethodType.UNARY,
  proto_file_pb.FileGetRequest,
  proto_file_pb.FileGetResponse,
  /**
   * @param {!proto.file.FileGetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_file_pb.FileGetResponse.deserializeBinary
);


/**
 * @param {!proto.file.FileGetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.file.FileGetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.file.FileGetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.FileClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.File/Get',
      request,
      metadata || {},
      methodDescriptor_File_Get,
      callback);
};


/**
 * @param {!proto.file.FileGetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.file.FileGetResponse>}
 *     Promise that resolves to the response
 */
proto.services.FilePromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.File/Get',
      request,
      metadata || {},
      methodDescriptor_File_Get);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.services.AuthClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.services.AuthPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.SignInRequest,
 *   !proto.auth.SignInResponse>}
 */
const methodDescriptor_Auth_SignIn = new grpc.web.MethodDescriptor(
  '/services.Auth/SignIn',
  grpc.web.MethodType.UNARY,
  proto_auth_pb.SignInRequest,
  proto_auth_pb.SignInResponse,
  /**
   * @param {!proto.auth.SignInRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_auth_pb.SignInResponse.deserializeBinary
);


/**
 * @param {!proto.auth.SignInRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.SignInResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.SignInResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.AuthClient.prototype.signIn =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.Auth/SignIn',
      request,
      metadata || {},
      methodDescriptor_Auth_SignIn,
      callback);
};


/**
 * @param {!proto.auth.SignInRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.SignInResponse>}
 *     Promise that resolves to the response
 */
proto.services.AuthPromiseClient.prototype.signIn =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.Auth/SignIn',
      request,
      metadata || {},
      methodDescriptor_Auth_SignIn);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.services.SessionClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.services.SessionPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.session.SessionCreateRequest,
 *   !proto.session.SessionCreateResponse>}
 */
const methodDescriptor_Session_Create = new grpc.web.MethodDescriptor(
  '/services.Session/Create',
  grpc.web.MethodType.UNARY,
  proto_session_pb.SessionCreateRequest,
  proto_session_pb.SessionCreateResponse,
  /**
   * @param {!proto.session.SessionCreateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_session_pb.SessionCreateResponse.deserializeBinary
);


/**
 * @param {!proto.session.SessionCreateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.session.SessionCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.session.SessionCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.SessionClient.prototype.create =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.Session/Create',
      request,
      metadata || {},
      methodDescriptor_Session_Create,
      callback);
};


/**
 * @param {!proto.session.SessionCreateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.session.SessionCreateResponse>}
 *     Promise that resolves to the response
 */
proto.services.SessionPromiseClient.prototype.create =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.Session/Create',
      request,
      metadata || {},
      methodDescriptor_Session_Create);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.session.SessionGetEmailRequest,
 *   !proto.session.SessionGetEmailResponse>}
 */
const methodDescriptor_Session_GetEmail = new grpc.web.MethodDescriptor(
  '/services.Session/GetEmail',
  grpc.web.MethodType.UNARY,
  proto_session_pb.SessionGetEmailRequest,
  proto_session_pb.SessionGetEmailResponse,
  /**
   * @param {!proto.session.SessionGetEmailRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_session_pb.SessionGetEmailResponse.deserializeBinary
);


/**
 * @param {!proto.session.SessionGetEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.session.SessionGetEmailResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.session.SessionGetEmailResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.SessionClient.prototype.getEmail =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.Session/GetEmail',
      request,
      metadata || {},
      methodDescriptor_Session_GetEmail,
      callback);
};


/**
 * @param {!proto.session.SessionGetEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.session.SessionGetEmailResponse>}
 *     Promise that resolves to the response
 */
proto.services.SessionPromiseClient.prototype.getEmail =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.Session/GetEmail',
      request,
      metadata || {},
      methodDescriptor_Session_GetEmail);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.session.SessionUpdateActivityRequest,
 *   !proto.session.SessionUpdateActivityResponse>}
 */
const methodDescriptor_Session_UpdateLastActivityTime = new grpc.web.MethodDescriptor(
  '/services.Session/UpdateLastActivityTime',
  grpc.web.MethodType.UNARY,
  proto_session_pb.SessionUpdateActivityRequest,
  proto_session_pb.SessionUpdateActivityResponse,
  /**
   * @param {!proto.session.SessionUpdateActivityRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_session_pb.SessionUpdateActivityResponse.deserializeBinary
);


/**
 * @param {!proto.session.SessionUpdateActivityRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.session.SessionUpdateActivityResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.session.SessionUpdateActivityResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.SessionClient.prototype.updateLastActivityTime =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.Session/UpdateLastActivityTime',
      request,
      metadata || {},
      methodDescriptor_Session_UpdateLastActivityTime,
      callback);
};


/**
 * @param {!proto.session.SessionUpdateActivityRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.session.SessionUpdateActivityResponse>}
 *     Promise that resolves to the response
 */
proto.services.SessionPromiseClient.prototype.updateLastActivityTime =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.Session/UpdateLastActivityTime',
      request,
      metadata || {},
      methodDescriptor_Session_UpdateLastActivityTime);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.session.SessionGetActiveRequest,
 *   !proto.session.SessionGetActiveResponse>}
 */
const methodDescriptor_Session_GetActive = new grpc.web.MethodDescriptor(
  '/services.Session/GetActive',
  grpc.web.MethodType.UNARY,
  proto_session_pb.SessionGetActiveRequest,
  proto_session_pb.SessionGetActiveResponse,
  /**
   * @param {!proto.session.SessionGetActiveRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto_session_pb.SessionGetActiveResponse.deserializeBinary
);


/**
 * @param {!proto.session.SessionGetActiveRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.session.SessionGetActiveResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.session.SessionGetActiveResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.SessionClient.prototype.getActive =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.Session/GetActive',
      request,
      metadata || {},
      methodDescriptor_Session_GetActive,
      callback);
};


/**
 * @param {!proto.session.SessionGetActiveRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.session.SessionGetActiveResponse>}
 *     Promise that resolves to the response
 */
proto.services.SessionPromiseClient.prototype.getActive =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.Session/GetActive',
      request,
      metadata || {},
      methodDescriptor_Session_GetActive);
};


module.exports = proto.services;

