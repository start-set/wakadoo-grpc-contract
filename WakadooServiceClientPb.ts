/**
 * @fileoverview gRPC-Web generated client stub for services
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: wakadoo.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_auth_pb from './proto/auth_pb';
import * as proto_file_pb from './proto/file_pb';
import * as proto_session_pb from './proto/session_pb';


export class FileClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSave = new grpcWeb.MethodDescriptor(
    '/services.File/Save',
    grpcWeb.MethodType.UNARY,
    proto_file_pb.FileSaveRequest,
    proto_file_pb.FileSaveResponse,
    (request: proto_file_pb.FileSaveRequest) => {
      return request.serializeBinary();
    },
    proto_file_pb.FileSaveResponse.deserializeBinary
  );

  save(
    request: proto_file_pb.FileSaveRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_file_pb.FileSaveResponse>;

  save(
    request: proto_file_pb.FileSaveRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_file_pb.FileSaveResponse) => void): grpcWeb.ClientReadableStream<proto_file_pb.FileSaveResponse>;

  save(
    request: proto_file_pb.FileSaveRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_file_pb.FileSaveResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.File/Save',
        request,
        metadata || {},
        this.methodDescriptorSave,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.File/Save',
    request,
    metadata || {},
    this.methodDescriptorSave);
  }

  methodDescriptorGet = new grpcWeb.MethodDescriptor(
    '/services.File/Get',
    grpcWeb.MethodType.UNARY,
    proto_file_pb.FileGetRequest,
    proto_file_pb.FileGetResponse,
    (request: proto_file_pb.FileGetRequest) => {
      return request.serializeBinary();
    },
    proto_file_pb.FileGetResponse.deserializeBinary
  );

  get(
    request: proto_file_pb.FileGetRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_file_pb.FileGetResponse>;

  get(
    request: proto_file_pb.FileGetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_file_pb.FileGetResponse) => void): grpcWeb.ClientReadableStream<proto_file_pb.FileGetResponse>;

  get(
    request: proto_file_pb.FileGetRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_file_pb.FileGetResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.File/Get',
        request,
        metadata || {},
        this.methodDescriptorGet,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.File/Get',
    request,
    metadata || {},
    this.methodDescriptorGet);
  }

}

export class AuthClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSignIn = new grpcWeb.MethodDescriptor(
    '/services.Auth/SignIn',
    grpcWeb.MethodType.UNARY,
    proto_auth_pb.SignInRequest,
    proto_auth_pb.SignInResponse,
    (request: proto_auth_pb.SignInRequest) => {
      return request.serializeBinary();
    },
    proto_auth_pb.SignInResponse.deserializeBinary
  );

  signIn(
    request: proto_auth_pb.SignInRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_auth_pb.SignInResponse>;

  signIn(
    request: proto_auth_pb.SignInRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_auth_pb.SignInResponse) => void): grpcWeb.ClientReadableStream<proto_auth_pb.SignInResponse>;

  signIn(
    request: proto_auth_pb.SignInRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_auth_pb.SignInResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.Auth/SignIn',
        request,
        metadata || {},
        this.methodDescriptorSignIn,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.Auth/SignIn',
    request,
    metadata || {},
    this.methodDescriptorSignIn);
  }

}

export class SessionClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreate = new grpcWeb.MethodDescriptor(
    '/services.Session/Create',
    grpcWeb.MethodType.UNARY,
    proto_session_pb.SessionCreateRequest,
    proto_session_pb.SessionCreateResponse,
    (request: proto_session_pb.SessionCreateRequest) => {
      return request.serializeBinary();
    },
    proto_session_pb.SessionCreateResponse.deserializeBinary
  );

  create(
    request: proto_session_pb.SessionCreateRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_session_pb.SessionCreateResponse>;

  create(
    request: proto_session_pb.SessionCreateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_session_pb.SessionCreateResponse) => void): grpcWeb.ClientReadableStream<proto_session_pb.SessionCreateResponse>;

  create(
    request: proto_session_pb.SessionCreateRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_session_pb.SessionCreateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.Session/Create',
        request,
        metadata || {},
        this.methodDescriptorCreate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.Session/Create',
    request,
    metadata || {},
    this.methodDescriptorCreate);
  }

  methodDescriptorGetEmail = new grpcWeb.MethodDescriptor(
    '/services.Session/GetEmail',
    grpcWeb.MethodType.UNARY,
    proto_session_pb.SessionGetEmailRequest,
    proto_session_pb.SessionGetEmailResponse,
    (request: proto_session_pb.SessionGetEmailRequest) => {
      return request.serializeBinary();
    },
    proto_session_pb.SessionGetEmailResponse.deserializeBinary
  );

  getEmail(
    request: proto_session_pb.SessionGetEmailRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_session_pb.SessionGetEmailResponse>;

  getEmail(
    request: proto_session_pb.SessionGetEmailRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_session_pb.SessionGetEmailResponse) => void): grpcWeb.ClientReadableStream<proto_session_pb.SessionGetEmailResponse>;

  getEmail(
    request: proto_session_pb.SessionGetEmailRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_session_pb.SessionGetEmailResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.Session/GetEmail',
        request,
        metadata || {},
        this.methodDescriptorGetEmail,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.Session/GetEmail',
    request,
    metadata || {},
    this.methodDescriptorGetEmail);
  }

  methodDescriptorUpdateLastActivityTime = new grpcWeb.MethodDescriptor(
    '/services.Session/UpdateLastActivityTime',
    grpcWeb.MethodType.UNARY,
    proto_session_pb.SessionUpdateActivityRequest,
    proto_session_pb.SessionUpdateActivityResponse,
    (request: proto_session_pb.SessionUpdateActivityRequest) => {
      return request.serializeBinary();
    },
    proto_session_pb.SessionUpdateActivityResponse.deserializeBinary
  );

  updateLastActivityTime(
    request: proto_session_pb.SessionUpdateActivityRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_session_pb.SessionUpdateActivityResponse>;

  updateLastActivityTime(
    request: proto_session_pb.SessionUpdateActivityRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_session_pb.SessionUpdateActivityResponse) => void): grpcWeb.ClientReadableStream<proto_session_pb.SessionUpdateActivityResponse>;

  updateLastActivityTime(
    request: proto_session_pb.SessionUpdateActivityRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_session_pb.SessionUpdateActivityResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.Session/UpdateLastActivityTime',
        request,
        metadata || {},
        this.methodDescriptorUpdateLastActivityTime,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.Session/UpdateLastActivityTime',
    request,
    metadata || {},
    this.methodDescriptorUpdateLastActivityTime);
  }

  methodDescriptorGetActive = new grpcWeb.MethodDescriptor(
    '/services.Session/GetActive',
    grpcWeb.MethodType.UNARY,
    proto_session_pb.SessionGetActiveRequest,
    proto_session_pb.SessionGetActiveResponse,
    (request: proto_session_pb.SessionGetActiveRequest) => {
      return request.serializeBinary();
    },
    proto_session_pb.SessionGetActiveResponse.deserializeBinary
  );

  getActive(
    request: proto_session_pb.SessionGetActiveRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_session_pb.SessionGetActiveResponse>;

  getActive(
    request: proto_session_pb.SessionGetActiveRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_session_pb.SessionGetActiveResponse) => void): grpcWeb.ClientReadableStream<proto_session_pb.SessionGetActiveResponse>;

  getActive(
    request: proto_session_pb.SessionGetActiveRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_session_pb.SessionGetActiveResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/services.Session/GetActive',
        request,
        metadata || {},
        this.methodDescriptorGetActive,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/services.Session/GetActive',
    request,
    metadata || {},
    this.methodDescriptorGetActive);
  }

}

